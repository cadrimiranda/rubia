package com.ruby.rubia_server.controller;

import com.ruby.rubia_server.core.service.SecureCampaignQueueService;
import com.ruby.rubia_server.core.service.CampaignService;
import com.ruby.rubia_server.core.util.CampaignAuthenticationExtractor;
import com.ruby.rubia_server.core.entity.Campaign;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import java.util.Optional;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.util.Map;
import java.util.UUID;

/**
 * Controller seguro para gerenciamento de filas de campanhas
 * Requer autentica√ß√£o e autoriza√ß√£o adequadas
 */
@RestController
@RequestMapping("/api/secure/campaigns")
@RequiredArgsConstructor
@Slf4j
@ConditionalOnProperty(name = "campaign.queue.provider", havingValue = "redis")
public class SecureCampaignMessagingController {

    private final SecureCampaignQueueService secureCampaignQueueService;
    private final CampaignAuthenticationExtractor authExtractor;
    private final CampaignService campaignService;

    /**
     * Adiciona campanha √† fila segura (apenas usu√°rios autenticados da empresa)
     */
    @PostMapping("/{campaignId}/start-messaging")
    @PreAuthorize("hasRole('CAMPAIGN_MANAGER') or hasRole('ADMIN')")
    public ResponseEntity<Map<String, Object>> startSecureCampaignMessaging(
            @PathVariable UUID campaignId,
            Authentication authentication) {
        
        log.info("üîí Iniciando campanha segura: {} por usu√°rio: {}", 
                campaignId, authentication.getName());
        
        try {
            // Extrair informa√ß√µes do usu√°rio autenticado
            String userId = extractUserId(authentication);
            String companyId = extractCompanyId(authentication);
            
            if (companyId == null) {
                return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "error", "Usu√°rio n√£o possui empresa associada"
                ));
            }
            
            // Validar permiss√µes espec√≠ficas da campanha
            if (!hasAccessToCampaign(campaignId, companyId, userId)) {
                log.warn("üö® Tentativa de acesso n√£o autorizado √† campanha {} por usu√°rio {}", 
                        campaignId, userId);
                
                return ResponseEntity.status(403).body(Map.of(
                    "success", false,
                    "error", "Acesso negado √† campanha"
                ));
            }
            
            // Adicionar √† fila segura
            secureCampaignQueueService.enqueueCampaign(campaignId, companyId, userId);
            
            // Log de auditoria
            log.info("‚úÖ Campanha {} adicionada √† fila segura por usu√°rio {} da empresa {}", 
                    campaignId, userId, companyId);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Campanha adicionada √† fila segura",
                "campaignId", campaignId,
                "addedBy", userId,
                "companyId", companyId
            ));
            
        } catch (SecurityException e) {
            log.warn("üö® Viola√ß√£o de seguran√ßa: {}", e.getMessage());
            
            return ResponseEntity.status(403).body(Map.of(
                "success", false,
                "error", "Acesso negado: " + e.getMessage()
            ));
            
        } catch (Exception e) {
            log.error("‚ùå Erro ao adicionar campanha {} √† fila segura: {}", 
                    campaignId, e.getMessage(), e);
            
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "error", e.getMessage(),
                "campaignId", campaignId
            ));
        }
    }

    /**
     * Pausa campanha (apenas usu√°rios autorizados)
     */
    @PostMapping("/{campaignId}/pause-messaging")
    @PreAuthorize("hasRole('CAMPAIGN_MANAGER') or hasRole('ADMIN')")
    public ResponseEntity<Map<String, Object>> pauseSecureCampaignMessaging(
            @PathVariable UUID campaignId,
            Authentication authentication) {
        
        log.info("üîí Pausando campanha segura: {} por usu√°rio: {}", 
                campaignId, authentication.getName());
        
        try {
            String userId = extractUserId(authentication);
            String companyId = extractCompanyId(authentication);
            
            if (!hasAccessToCampaign(campaignId, companyId, userId)) {
                return ResponseEntity.status(403).body(Map.of(
                    "success", false,
                    "error", "Acesso negado √† campanha"
                ));
            }
            
            // Pausar campanha no Redis
            secureCampaignQueueService.pauseCampaign(campaignId, companyId, userId);
            
            log.info("‚è∏Ô∏è Campanha {} pausada por usu√°rio {} da empresa {}", 
                    campaignId, userId, companyId);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Campanha pausada com sucesso",
                "campaignId", campaignId,
                "pausedBy", userId
            ));
            
        } catch (Exception e) {
            log.error("‚ùå Erro ao pausar campanha {}: {}", campaignId, e.getMessage());
            
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "error", e.getMessage()
            ));
        }
    }

    /**
     * Retoma uma campanha pausada (apenas usu√°rios autenticados da empresa)
     */
    @PostMapping("/{campaignId}/resume-messaging")
    @PreAuthorize("hasRole('CAMPAIGN_MANAGER') or hasRole('ADMIN')")
    public ResponseEntity<Map<String, Object>> resumeSecureCampaignMessaging(
            @PathVariable UUID campaignId,
            Authentication authentication) {
        
        log.info("üîí Retomando campanha segura: {} por usu√°rio: {}", 
                campaignId, authentication.getName());
        
        try {
            // Extrair informa√ß√µes do usu√°rio autenticado
            String userId = extractUserId(authentication);
            String companyId = extractCompanyId(authentication);
            
            if (!hasAccessToCampaign(campaignId, companyId, userId)) {
                return ResponseEntity.status(403).body(Map.of(
                    "success", false,
                    "error", "Acesso negado √† campanha"
                ));
            }
            
            // Retomar campanha no Redis
            secureCampaignQueueService.resumeCampaign(campaignId, companyId, userId);
            
            log.info("‚ñ∂Ô∏è Campanha {} retomada por usu√°rio {} da empresa {}", 
                    campaignId, userId, companyId);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Campanha retomada com sucesso",
                "campaignId", campaignId,
                "resumedBy", userId
            ));
            
        } catch (Exception e) {
            log.error("‚ùå Erro ao retomar campanha {}: {}", campaignId, e.getMessage());
            
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "error", e.getMessage()
            ));
        }
    }

    /**
     * Estat√≠sticas da campanha (apenas para usu√°rios da empresa)
     */
    @GetMapping("/{campaignId}/messaging-stats")
    @PreAuthorize("hasRole('CAMPAIGN_VIEWER') or hasRole('CAMPAIGN_MANAGER') or hasRole('ADMIN')")
    public ResponseEntity<Map<String, Object>> getSecureCampaignStats(
            @PathVariable UUID campaignId,
            Authentication authentication) {
        
        try {
            String userId = extractUserId(authentication);
            String companyId = extractCompanyId(authentication);
            
            if (!hasAccessToCampaign(campaignId, companyId, userId)) {
                return ResponseEntity.status(403).body(Map.of(
                    "success", false,
                    "error", "Acesso negado √†s estat√≠sticas da campanha"
                ));
            }
            
            Map<String, Object> stats = secureCampaignQueueService.getCampaignStats(campaignId, companyId);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Estat√≠sticas obtidas com sucesso",
                "stats", stats
            ));
            
        } catch (Exception e) {
            log.error("‚ùå Erro ao buscar estat√≠sticas da campanha {}: {}", 
                    campaignId, e.getMessage());
            
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "error", e.getMessage()
            ));
        }
    }

    /**
     * Estat√≠sticas globais (apenas administradores)
     */
    @GetMapping("/queue/global-stats")
    @PreAuthorize("hasRole('ADMIN') or hasRole('SYSTEM_MONITOR')")
    public ResponseEntity<Map<String, Object>> getGlobalSecureStats(Authentication authentication) {
        
        log.info("üîç Acessando estat√≠sticas globais: usu√°rio {}", authentication.getName());
        
        try {
            String userId = extractUserId(authentication);
            String companyId = extractCompanyId(authentication);
            
            Map<String, Object> globalStats = secureCampaignQueueService.getGlobalQueueStats();
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Estat√≠sticas globais obtidas com sucesso",
                "stats", globalStats
            ));
            
        } catch (Exception e) {
            log.error("‚ùå Erro ao buscar estat√≠sticas globais: {}", e.getMessage());
            
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "error", e.getMessage()
            ));
        }
    }

    /**
     * Extrai ID do usu√°rio do token JWT
     */
    private String extractUserId(Authentication authentication) {
        return authExtractor.extractFromAuthentication(authentication).getUserId();
    }

    /**
     * Extrai ID da empresa do token JWT
     */
    private String extractCompanyId(Authentication authentication) {
        return authExtractor.extractFromAuthentication(authentication).getCompanyId();
    }

    /**
     * Valida se usu√°rio tem acesso √† campanha espec√≠fica
     */
    private boolean hasAccessToCampaign(UUID campaignId, String companyId, String userId) {
        try {
            log.debug("Validando acesso: campanha={}, empresa={}, usu√°rio={}", 
                    campaignId, companyId, userId);
            
            // Buscar campanha no banco
            Optional<Campaign> campaignOpt = campaignService.findById(campaignId);
            if (campaignOpt.isEmpty()) {
                log.warn("Campanha {} n√£o encontrada", campaignId);
                return false;
            }
            
            Campaign campaign = campaignOpt.get();
            
            // Validar se a campanha pertence √† empresa do usu√°rio
            UUID campaignCompanyId = campaign.getCompany().getId();
            boolean companyMatch = campaignCompanyId.toString().equals(companyId);
            
            if (!companyMatch) {
                log.warn("Tentativa de acesso cross-company: usu√°rio empresa={}, campanha empresa={}", 
                        companyId, campaignCompanyId);
                return false;
            }
            
            log.debug("Acesso autorizado para campanha {} por usu√°rio {} da empresa {}", 
                    campaignId, userId, companyId);
            
            return true;
            
        } catch (Exception e) {
            log.error("Erro na valida√ß√£o de acesso para campanha {}: {}", campaignId, e.getMessage(), e);
            return false;
        }
    }
}